# -*- coding: utf-8 -*-
"""
Created on Sun Aug  7 12:32:32 2022

@author: patag
"""

import numpy as np
import csv
import cantera as ct
import matplotlib.pyplot as plt

from sdtoolbox import postshock, stagnation
from sdtoolbox.postshock import PostShock_eq
from sdtoolbox.stagnation import stgsolve


import sys
sys.path.append(r'D:\Files\Uni\2022\Capstone\Capstone-code')

'''
Flight data inputs
'''

    
with open("pathfinder_velocity.csv") as velocity_csv:
    flight_velocity_list = list(csv.reader(velocity_csv))[0][2:157]
    flight_velocity_list = [eval(x) for x in flight_velocity_list]

# flight_velocity_list = np.ndarray.tolist(np.full((1,152), 4000)   )[0]               

with open("pathfinder_density.csv") as density_csv:
    flight_density1_list = list(csv.reader(density_csv,delimiter = ','))[0][2:157]
    flight_density1_list = [eval(x) for x in flight_density1_list]
with open("pathfinder_pressure.csv") as pressure_csv:
    flight_pressure_list = list(csv.reader(pressure_csv,delimiter = ','))[0][2:157]
    flight_pressure_list = [eval(x) for x in flight_pressure_list]
with open("pathfinder_temperature.csv") as temperature_csv:
    flight_temperature_list = list(csv.reader(temperature_csv,delimiter = ','))[0][2:157]
    flight_temperature_list = [eval(x) for x in flight_temperature_list]

# flight_density2_list = []

# for count, U1 in enumerate(flight_velocity_list):
#     P1 = flight_pressure_list[count]
#     T1 = flight_temperature_list[count]
#     q = "CO2:0.95, N2:0.05"
#     mech = 'airNASA9noions.cti'
#     gas = PostShock_eq(U1, P1, T1, q, mech)     # postshock gas condition
    
#     gas1 = ct.ThermoPhase("airNASA9noions.cti")     
#     gas1.TPX = T1,P1,q                          # inital gas conditions
    
#     Delta = 0.2
    
#     output = stgsolve(gas, gas1, U1, Delta)
#     density_array = output["rho"]
#     stagnation_density = density_array[len(density_array)-1]
#     flight_density2_list.append(stagnation_density)
    
# print("flight density calc complete")

# K = [rho1/rho2 for rho1,rho2 in zip(flight_density1_list,flight_density2_list)]
# print(K)


K = [0.034087343682231486, 0.034537294607497174, 0.03474872968724696, 0.034871164639901295, 0.03534440580711786, 0.035683736935780995, 0.03581967080128812, 0.03616500298480343, 0.03644318506516749, 0.03679831369294941, 0.03684296912275228, 0.03691533787456534, 0.037227920087350395, 0.03726778296885322, 0.037870722147200775, 0.038073435866367286, 0.038269471420908044, 0.038422917072083, 0.03860704484117489, 0.03891993784708353, 0.03913144873660441, 0.03937569022589007, 0.03994133894817609, 0.04022100362154559, 0.040318407201527434, 0.04059559826034997, 0.040757547782659, 0.04097482229650357, 0.04166776442749257, 0.041943329395954694, 0.04260774117292342, 0.04297961973145022, 0.04335121340252125, 0.043755194917379406, 0.04395206047364133, 0.044244246874361716, 0.04457637736346542, 0.044824663738892524, 0.0451039357976296, 0.045474209626047486, 0.04601832780580353, 0.046124189813387624, 0.04651820523981342, 0.0469257008959915, 0.04722584686142815, 0.047491563314878256, 0.047820665182754754, 0.048174335588979066, 0.04849677216972947, 0.04869315259833656, 0.04896606368314624, 0.04939636937947958, 0.049753133801188086, 0.05009652209999381, 0.050359504060918464, 0.05067721678606292, 0.05099131720768411, 0.0512979555432025, 0.051737539119596054, 0.05235233394967064, 0.05292905866594171, 0.0535037027892302, 0.05403089550050095, 0.054513165941348196, 0.0549167320306456, 0.05523865062993076, 0.05547279961688767, 0.055588567114833794, 0.05519960981503116, 0.053826649471619276, 0.051474199497747584, 0.04880057405536375, 0.04689444548732823, 0.04576778549373918, 0.04526862986108287, 0.045123301232741546, 0.045176554695626626, 0.045419099748572396, 0.045879515473006297, 0.04652352020737962, 0.04716620952814432, 0.047923142044356305, 0.04880360584354261, 0.04981481119331713, 0.050914780744389584, 0.05216481719063724, 0.053783624303529225, 0.05590030101664136, 0.05770509936225658, 0.058968675275016494, 0.06112675748708799, 0.06456109413738129, 0.06679894279430158, 0.06871346626670594, 0.07102075591883511, 0.07361533304168023, 0.07725208155607342, 0.0801502394383865, 0.08287513914758904, 0.08474597409348532, 0.08704343335252024, 0.09107873187997399, 0.09303088637338759, 0.09502402047528707, 0.09703816933076964, 0.09901771317386779, 0.10088958785732313, 0.10260797185725501, 0.1043959281835928, 0.1062798573355129, 0.10801916574534519, 0.10967727094831801, 0.11143803365963689, 0.1136927367750032, 0.11630908634239, 0.11914657705735582, 0.12225209603504422, 0.1244315610416366, 0.1266537295108078, 0.12901806612897798, 0.1315375175483709, 0.1342277201282237, 0.1371064062062606, 0.14019292328241206, 0.14301484102899562, 0.1457547440589256, 0.14859693309201757, 0.1515585862575188, 0.15470625422546871, 0.15805766542222155, 0.16166120128083675, 0.16471970715488754, 0.1675527168151684, 0.17053052315875009, 0.17366433994904332, 0.17696670205460827, 0.1804514409523247, 0.18414077978466653, 0.1880649679529777, 0.19226321652237682, 0.19677491749913553, 0.20158418646696155, 0.2067170404849161, 0.21220618383404832, 0.21808851368104817, 0.22440655291251685, 0.2312062416678771, 0.2364277821721344, 0.2380440084407615, 0.23968866287998755, 0.2413614742711153, 0.2430636181993437, 0.2478429544461822, 0.254391467186739, 0.2613703078431258]

H_t_e = []
P_t_inf = []



for count, U1 in enumerate(flight_velocity_list):
    H_t_e.append(U1**2/2/(10**6))
    P_t_inf.append( (1-K[count])*flight_density1_list[count]*(U1**2)/(10**3))
    #P_t_inf.append( flight_density1_list[count]*(U1**2))

plt.plot(H_t_e,P_t_inf)
plt.xlabel("Enthalpy MJ/kg")
plt.ylabel("Stagnation kPa")
    

# flight_density_e_list = [1, 2]
# flight_density_ratio_array = [i/j for i, j in zip(flight_density_1_list, (flight_density_e_list))]

RN = 0.66   # flight nose radius, m
RT_star = np.linspace(0.005,0.025,1)